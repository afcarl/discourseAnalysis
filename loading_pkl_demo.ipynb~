{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import cPickle as pickle\n",
    "a = pickle.load(open('trees_test.pkl','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Tree('N1', []),\n",
       " Tree('', [Tree('N2', []), Tree('N1', [])]),\n",
       " Tree('A1', []),\n",
       " Tree('A2', []),\n",
       " Tree('A1', [Tree('A1', []), Tree('I1', [])]),\n",
       " Tree('I2', []),\n",
       " Tree('I1', [])]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Tree('N1', []),\n",
       " Tree('', [Tree('N2', []), Tree('N1', [])]),\n",
       " Tree('A1', []),\n",
       " Tree('A2', []),\n",
       " Tree('A1', [Tree('A1', []), Tree('I1', [])]),\n",
       " Tree('I2', []),\n",
       " Tree('I1', [])]"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = pickle.load(open('dicts_test.pkl','rb'))\n",
    "d['bin']\n",
    "v = pickle.load(open('vects_test.pkl','rb'))\n",
    "v['bin']\n",
    "t = pickle.load(open('trees_test.pkl','rb'))\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 1 2 2 2]\n",
      "[[ 1.          0.75147729  0.75147729  0.75147729  0.65143906  0.75147729\n",
      "   0.75147729]\n",
      " [ 0.75147729  1.          0.56471812  0.56471812  0.48954166  0.56471812\n",
      "   0.56471812]\n",
      " [ 0.75147729  0.56471812  1.          0.75147729  0.8668779   0.75147729\n",
      "   0.75147729]\n",
      " [ 0.75147729  0.56471812  0.75147729  1.          0.65143906  0.75147729\n",
      "   0.75147729]\n",
      " [ 0.65143906  0.48954166  0.8668779   0.65143906  1.          0.65143906\n",
      "   0.8668779 ]\n",
      " [ 0.75147729  0.56471812  0.75147729  0.75147729  0.65143906  1.\n",
      "   0.75147729]\n",
      " [ 0.75147729  0.56471812  0.75147729  0.75147729  0.8668779   0.75147729\n",
      "   1.        ]]\n"
     ]
    }
   ],
   "source": [
    "v = pickle.load(open('kernels_test.pkl','rb'))\n",
    "y = pickle.load(open('labels_test.pkl','rb'))\n",
    "print y\n",
    "print v['rbf']['bin']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1])"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors=5,metric='precomputed')\n",
    "clf.fit(v['eucl_dist'][0],y)\n",
    "clf.predict(v['eucl_dist'][0][2:4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cos_sim': [array([[ 1.        ,  0.57735027,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.57735027,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ,  0.        ,  0.70710678,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.70710678,  0.        ,  1.        ,\n",
       "           0.        ,  0.70710678],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "           1.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.70710678,\n",
       "           0.        ,  1.        ]]),\n",
       "  array([[ 1.        ,  0.57735027,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.57735027,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ,  0.        ,  0.89442719,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.89442719,  0.        ,  1.        ,\n",
       "           0.        ,  0.4472136 ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "           1.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.4472136 ,\n",
       "           0.        ,  1.        ]]),\n",
       "  array([[ 1.        ,  0.57735027,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.57735027,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ,  0.        ,  0.89442719,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.89442719,  0.        ,  1.        ,\n",
       "           0.        ,  0.4472136 ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "           1.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.4472136 ,\n",
       "           0.        ,  1.        ]]),\n",
       "  array([[ 1.        ,  0.57735027,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.57735027,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ,  0.        ,  0.89442719,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.89442719,  0.        ,  1.        ,\n",
       "           0.        ,  0.4472136 ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "           1.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.4472136 ,\n",
       "           0.        ,  1.        ]]),\n",
       "  array([[ 1.        ,  0.33333333,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.33333333,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ,  0.        ,  0.89442719,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.89442719,  0.        ,  1.        ,\n",
       "           0.        ,  0.4472136 ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "           1.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.4472136 ,\n",
       "           0.        ,  1.        ]])],\n",
       " 'eucl_dist': [array([[ 0.        ,  1.41421356,  1.41421356,  1.41421356,  1.73205081,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  0.        ,  2.        ,  2.        ,  2.23606798,\n",
       "           2.        ,  2.        ],\n",
       "         [ 1.41421356,  2.        ,  0.        ,  1.41421356,  1.        ,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  0.        ,  1.73205081,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.73205081,  2.23606798,  1.        ,  1.73205081,  0.        ,\n",
       "           1.73205081,  1.        ],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  1.41421356,  1.73205081,\n",
       "           0.        ,  1.41421356],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  1.41421356,  1.        ,\n",
       "           1.41421356,  0.        ]]),\n",
       "  array([[ 0.        ,  1.41421356,  1.41421356,  1.41421356,  2.44948974,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  0.        ,  2.        ,  2.        ,  2.82842712,\n",
       "           2.        ,  2.        ],\n",
       "         [ 1.41421356,  2.        ,  0.        ,  1.41421356,  1.41421356,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  0.        ,  2.44948974,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 2.44948974,  2.82842712,  1.41421356,  2.44948974,  0.        ,\n",
       "           2.44948974,  2.        ],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  1.41421356,  2.44948974,\n",
       "           0.        ,  1.41421356],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  1.41421356,  2.        ,\n",
       "           1.41421356,  0.        ]]),\n",
       "  array([[ 0.        ,  0.81649658,  1.41421356,  1.41421356,  1.24721913,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 0.81649658,  0.        ,  1.15470054,  1.15470054,  0.94280904,\n",
       "           1.15470054,  1.15470054],\n",
       "         [ 1.41421356,  1.15470054,  0.        ,  1.41421356,  0.47140452,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  1.15470054,  1.41421356,  0.        ,  1.24721913,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.24721913,  0.94280904,  0.47140452,  1.24721913,  0.        ,\n",
       "           1.24721913,  0.94280904],\n",
       "         [ 1.41421356,  1.15470054,  1.41421356,  1.41421356,  1.24721913,\n",
       "           0.        ,  1.41421356],\n",
       "         [ 1.41421356,  1.15470054,  1.41421356,  1.41421356,  0.94280904,\n",
       "           1.41421356,  0.        ]]),\n",
       "  array([[ 0.        ,  1.41421356,  1.41421356,  1.41421356,  2.44948974,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  0.        ,  2.        ,  2.        ,  2.82842712,\n",
       "           2.        ,  2.        ],\n",
       "         [ 1.41421356,  2.        ,  0.        ,  1.41421356,  1.41421356,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  0.        ,  2.44948974,\n",
       "           1.41421356,  1.41421356],\n",
       "         [ 2.44948974,  2.82842712,  1.41421356,  2.44948974,  0.        ,\n",
       "           2.44948974,  2.        ],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  1.41421356,  2.44948974,\n",
       "           0.        ,  1.41421356],\n",
       "         [ 1.41421356,  2.        ,  1.41421356,  1.41421356,  2.        ,\n",
       "           1.41421356,  0.        ]]),\n",
       "  array([[ 0.        ,  4.04145188,  4.94974747,  7.82623792,  4.36526695,\n",
       "           7.82623792,  4.94974747],\n",
       "         [ 4.04145188,  0.        ,  4.94974747,  7.82623792,  4.36526695,\n",
       "           7.82623792,  4.94974747],\n",
       "         [ 4.94974747,  4.94974747,  0.        ,  7.82623792,  1.64991582,\n",
       "           7.82623792,  4.94974747],\n",
       "         [ 7.82623792,  7.82623792,  7.82623792,  0.        ,  7.47031161,\n",
       "           9.89949494,  7.82623792],\n",
       "         [ 4.36526695,  4.36526695,  1.64991582,  7.47031161,  0.        ,\n",
       "           7.47031161,  3.29983165],\n",
       "         [ 7.82623792,  7.82623792,  7.82623792,  9.89949494,  7.47031161,\n",
       "           0.        ,  7.82623792],\n",
       "         [ 4.94974747,  4.94974747,  4.94974747,  7.82623792,  3.29983165,\n",
       "           7.82623792,  0.        ]])],\n",
       " 'lin': [array([[ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n",
       "         [ 1.,  3.,  0.,  0.,  0.,  0.,  0.],\n",
       "         [ 0.,  0.,  1.,  0.,  1.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.,  1.,  0.,  0.,  0.],\n",
       "         [ 0.,  0.,  1.,  0.,  2.,  0.,  1.],\n",
       "         [ 0.,  0.,  0.,  0.,  0.,  1.,  0.],\n",
       "         [ 0.,  0.,  0.,  0.,  1.,  0.,  1.]]),\n",
       "  array([[ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n",
       "         [ 1.,  3.,  0.,  0.,  0.,  0.,  0.],\n",
       "         [ 0.,  0.,  1.,  0.,  2.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.,  1.,  0.,  0.,  0.],\n",
       "         [ 0.,  0.,  2.,  0.,  5.,  0.,  1.],\n",
       "         [ 0.,  0.,  0.,  0.,  0.,  1.,  0.],\n",
       "         [ 0.,  0.,  0.,  0.,  1.,  0.,  1.]]),\n",
       "  array([[ 1.        ,  0.33333333,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.33333333,  0.33333333,  0.        ,  0.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  1.        ,  0.        ,  0.66666667,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "           0.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.66666667,  0.        ,  0.55555556,\n",
       "           0.        ,  0.33333333],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "           1.        ,  0.        ],\n",
       "         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.33333333,\n",
       "           0.        ,  1.        ]]),\n",
       "  array([[ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n",
       "         [ 1.,  3.,  0.,  0.,  0.,  0.,  0.],\n",
       "         [ 0.,  0.,  1.,  0.,  2.,  0.,  0.],\n",
       "         [ 0.,  0.,  0.,  1.,  0.,  0.,  0.],\n",
       "         [ 0.,  0.,  2.,  0.,  5.,  0.,  1.],\n",
       "         [ 0.,  0.,  0.,  0.,  0.,  1.,  0.],\n",
       "         [ 0.,  0.,  0.,  0.,  1.,  0.,  1.]]),\n",
       "  array([[ 12.25      ,   4.08333333,   0.        ,   0.        ,\n",
       "            0.        ,   0.        ,   0.        ],\n",
       "         [  4.08333333,  12.25      ,   0.        ,   0.        ,\n",
       "            0.        ,   0.        ,   0.        ],\n",
       "         [  0.        ,   0.        ,  12.25      ,   0.        ,\n",
       "            8.16666667,   0.        ,   0.        ],\n",
       "         [  0.        ,   0.        ,   0.        ,  49.        ,\n",
       "            0.        ,   0.        ,   0.        ],\n",
       "         [  0.        ,   0.        ,   8.16666667,   0.        ,\n",
       "            6.80555556,   0.        ,   4.08333333],\n",
       "         [  0.        ,   0.        ,   0.        ,   0.        ,\n",
       "            0.        ,  49.        ,   0.        ],\n",
       "         [  0.        ,   0.        ,   0.        ,   0.        ,\n",
       "            4.08333333,   0.        ,  12.25      ]])],\n",
       " 'rbf': [array([[ 1.        ,  0.75147729,  0.75147729,  0.75147729,  0.65143906,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  1.        ,  0.56471812,  0.56471812,  0.48954166,\n",
       "           0.56471812,  0.56471812],\n",
       "         [ 0.75147729,  0.56471812,  1.        ,  0.75147729,  0.8668779 ,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  1.        ,  0.65143906,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.65143906,  0.48954166,  0.8668779 ,  0.65143906,  1.        ,\n",
       "           0.65143906,  0.8668779 ],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  0.75147729,  0.65143906,\n",
       "           1.        ,  0.75147729],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  0.75147729,  0.8668779 ,\n",
       "           0.75147729,  1.        ]]),\n",
       "  array([[ 1.        ,  0.75147729,  0.75147729,  0.75147729,  0.42437285,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  1.        ,  0.56471812,  0.56471812,  0.31890656,\n",
       "           0.56471812,  0.56471812],\n",
       "         [ 0.75147729,  0.56471812,  1.        ,  0.75147729,  0.75147729,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  1.        ,  0.42437285,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.42437285,  0.31890656,  0.75147729,  0.42437285,  1.        ,\n",
       "           0.42437285,  0.56471812],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  0.75147729,  0.42437285,\n",
       "           1.        ,  0.75147729],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  0.75147729,  0.56471812,\n",
       "           0.75147729,  1.        ]]),\n",
       "  array([[ 1.        ,  0.90915644,  0.75147729,  0.75147729,  0.8007374 ,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.90915644,  1.        ,  0.82656544,  0.82656544,  0.88074765,\n",
       "           0.82656544,  0.82656544],\n",
       "         [ 0.75147729,  0.82656544,  1.        ,  0.75147729,  0.96875258,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  0.82656544,  0.75147729,  1.        ,  0.8007374 ,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.8007374 ,  0.88074765,  0.96875258,  0.8007374 ,  1.        ,\n",
       "           0.8007374 ,  0.88074765],\n",
       "         [ 0.75147729,  0.82656544,  0.75147729,  0.75147729,  0.8007374 ,\n",
       "           1.        ,  0.75147729],\n",
       "         [ 0.75147729,  0.82656544,  0.75147729,  0.75147729,  0.88074765,\n",
       "           0.75147729,  1.        ]]),\n",
       "  array([[ 1.        ,  0.75147729,  0.75147729,  0.75147729,  0.42437285,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  1.        ,  0.56471812,  0.56471812,  0.31890656,\n",
       "           0.56471812,  0.56471812],\n",
       "         [ 0.75147729,  0.56471812,  1.        ,  0.75147729,  0.75147729,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  1.        ,  0.42437285,\n",
       "           0.75147729,  0.75147729],\n",
       "         [ 0.42437285,  0.31890656,  0.75147729,  0.42437285,  1.        ,\n",
       "           0.42437285,  0.56471812],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  0.75147729,  0.42437285,\n",
       "           1.        ,  0.75147729],\n",
       "         [ 0.75147729,  0.56471812,  0.75147729,  0.75147729,  0.56471812,\n",
       "           0.75147729,  1.        ]]),\n",
       "  array([[  1.00000000e+00,   9.69719679e-02,   3.01973834e-02,\n",
       "            1.58461325e-04,   6.57285286e-02,   1.58461325e-04,\n",
       "            3.01973834e-02],\n",
       "         [  9.69719679e-02,   1.00000000e+00,   3.01973834e-02,\n",
       "            1.58461325e-04,   6.57285286e-02,   1.58461325e-04,\n",
       "            3.01973834e-02],\n",
       "         [  3.01973834e-02,   3.01973834e-02,   1.00000000e+00,\n",
       "            1.58461325e-04,   6.77809578e-01,   1.58461325e-04,\n",
       "            3.01973834e-02],\n",
       "         [  1.58461325e-04,   1.58461325e-04,   1.58461325e-04,\n",
       "            1.00000000e+00,   3.44911663e-04,   8.31528719e-07,\n",
       "            1.58461325e-04],\n",
       "         [  6.57285286e-02,   6.57285286e-02,   6.77809578e-01,\n",
       "            3.44911663e-04,   1.00000000e+00,   3.44911663e-04,\n",
       "            2.11072088e-01],\n",
       "         [  1.58461325e-04,   1.58461325e-04,   1.58461325e-04,\n",
       "            8.31528719e-07,   3.44911663e-04,   1.00000000e+00,\n",
       "            1.58461325e-04],\n",
       "         [  3.01973834e-02,   3.01973834e-02,   3.01973834e-02,\n",
       "            1.58461325e-04,   2.11072088e-01,   1.58461325e-04,\n",
       "            1.00000000e+00]])]}"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kldjfl\n"
     ]
    }
   ],
   "source": [
    "b=None\n",
    "if(b is None):\n",
    "    print 'kldjfl'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from nltk import Tree\n",
    "t=Tree.fromstring(\"(A)\")\n",
    "t2=Tree.copy(t,deep=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Extraction des POS-TAGS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import numpy as np\n",
    "with open('../xmls/data/narrative/A.I.ArtificialIntelligence.txt.xml')as f:\n",
    "    s=f.read()\n",
    "soup = BeautifulSoup(open('../xmls/data/narrative/A.I.ArtificialIntelligence.txt.xml'),'lxml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pos = soup.findAll('pos')\n",
    "\n",
    "def get_pos_count(xmlfile,pos_list):\n",
    "    return np.array([len(soup.findAll('pos',text=pos)) for pos in pos_list])\n",
    "    \n",
    "def get_pos_norm(xmlfile,pos_list):\n",
    "    total_pos = len(soup.findAll('pos'))\n",
    "    count = get_pos_count(xmlfile,pos_list)\n",
    "    return np.array([float(c)/total_pos for c in count])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_pos_dict(soup):\n",
    "    d={}\n",
    "    tags = soup.findAll('pos')\n",
    "    for t in t\n",
    "    print tags[4:-5]\n",
    "    #d[tags[4:-5]]=1\n",
    "    print tags\n",
    "    \n",
    "    #d[tags]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unhashable type: 'list'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-113-ca45007cdd66>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mget_pos_dict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msoup\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m<ipython-input-112-4eeeda331b2b>\u001b[0m in \u001b[0;36mget_pos_dict\u001b[1;34m(soup)\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[0md\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m{\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mtags\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msoup\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfindAll\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'pos'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m     \u001b[0md\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtags\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m     \u001b[1;32mprint\u001b[0m \u001b[0mtags\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: unhashable type: 'list'"
     ]
    }
   ],
   "source": [
    "get_pos_dict(soup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.04531722,  0.03121853])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_pos_count(s,['PRP','RB'])\n",
    "get_pos_norm(s,['PRP','RB'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.04128902,  0.00805639,  0.08660624,  0.00100705,  0.        ,\n",
       "        0.11581067,  0.06042296,  0.0020141 ,  0.00100705,  0.        ,\n",
       "        0.00503525,  0.15206445,  0.02618328,  0.13494461,  0.        ,\n",
       "        0.        ,  0.        ,  0.04531722,  0.02517623,  0.03121853,\n",
       "        0.        ,  0.        ,  0.00704935,  0.        ,  0.03726083,\n",
       "        0.        ,  0.04330312,  0.00805639,  0.02316213,  0.04128902,\n",
       "        0.01711984,  0.0694864 ,  0.00805639,  0.00503525,  0.        ,\n",
       "        0.0040282 ])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import cPickle as pickle\n",
    "tags = pickle.load(open('tags.pkl','r'))\n",
    "get_pos_norm(s,tags)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
